//  Copyright 2022 fy <fy0748@gmail.com>
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

package dicescript

type Parser Peg {
    ParserData
    Context
}

// 出口
dicescript <- sp stmtRoot { p.AddOp(TypeHalt) }
stmtRoot <- stmtLines sp // stmtLines

stmtLines <- stmtWithBlock stmtLines?
           / flagsSwitch stmtLines?
           / comment stmtLines?
           / stmtWithSemicolon nextLine?
           / (';' sp)+ stmtLines?

nextLine <- ((spNoCR '\n' / sp ';') sp)+ stmtLines?

_switchEnablePrefix <- '#EnableDice'
_switchTrue <- 'true'
_switchFalse <- 'false'
flagsSwitch <- '//' sp? _switchEnablePrefix 'WoD' sp1 (_switchTrue sp1 !{p.Flags.EnableDiceWoD = true} / _switchFalse sp1 !{p.Flags.EnableDiceWoD = false})  [^\n]*
             / '//' sp? _switchEnablePrefix 'CoC' sp1 (_switchTrue sp1 !{p.Flags.EnableDiceCoC = true} / _switchFalse sp1 !{p.Flags.EnableDiceCoC = false})  [^\n]*
             / '//' sp? _switchEnablePrefix 'Fate' sp1 (_switchTrue sp1 !{p.Flags.EnableDiceFate = true} / _switchFalse sp1 !{p.Flags.EnableDiceFate = false})  [^\n]*
             / '//' sp? _switchEnablePrefix 'DoubleCross' sp1 (_switchTrue sp1 !{p.Flags.EnableDiceDoubleCross = true} / _switchFalse sp1 !{p.Flags.EnableDiceDoubleCross = false})  [^\n]*


stmtWithSemicolon <- stmtAssign / stmtBreak / stmtContinue / exprRoot

stmtWithBlock <- stmtIf / stmtFunc / stmtWhile / stmtReturn

stmtBreak <- 'break' sp { p.BreakPush() }

stmtContinue <- 'continue' sp { p.ContinuePush() }

stmtReturn <- 'return' sp1 exprRoot { p.AddOp(TypeReturn); }
            / 'return' sp { p.PushUndefined(); p.AddOp(TypeReturn); }

stmtWhile <- 'while' { p.LoopBegin(); p.OffsetPush() } sp1 exprRoot { p.AddOp(TypeJne); p.OffsetPush() }
             block { p.AddOp(TypeJmp); p.OffsetPush(); p.OffsetJmpSetX(0, 2, true); p.OffsetJmpSetX(1, 1, false); p.ContinueSet(2); p.BreakSet(); p.OffsetPopN(3);p.LoopEnd(); }
// push xxx // 这里是while后面的exprRoot
// jne 1
// ...
// jmp -3 // 跳回开始点

block <- ( '{' sp '}' / '{' sp stmtRoot '}' ) sp
stmtElse <- 'else' (sp block / sp1 stmtIf)
stmtIf <- 'if' sp1 exprRoot { p.AddOp(TypeJne); p.OffsetPush() } block { p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush(); }
           stmtElse? { p.OffsetPopAndSet() }
// 'if' exprRoot block
// ('else' block)?

// if ... then .. else
// push 1
// jne 2
// push "ret1"
// jmp 1
// push "ret2"

// 函数定义
func_def_params <- '(' sp ')' sp { p.CounterPush() }
                 / '(' sp { p.CounterPush(); p.CounterAdd(1) } identifier sp { p.NamePush(text) } (',' sp identifier sp { p.NamePush(text) } {p.CounterAdd(1)} )* ')' sp

stmtFunc <- 'func' sp1 identifier sp { p.NamePush(text) } func_def_params '{' sp { p.CodePush() } < stmtRoot? > '}' sp
            {  num := p.CounterPop(); arr := []string{}; for i:=int64(0); i<num; i++ { arr = append(arr, p.NamePop()) }; p.AddStoreFunction(p.NamePop(), arr, string(text)) }

// 赋值
stmtAssign <- identifier sp { p.NamePush(text) } '=' sp exprRoot { p.AddStore(p.NamePop()) }
            / '&' identifier sp { p.NamePush(text) } '=' sp { p.CodePush() } < exprRoot > { p.AddStoreComputed(p.NamePop(), string(text)) }
            / '&' identifier sp { p.NamePush(text) } '.' identifier sp { p.NamePush(text) } sp '=' sp exprRoot { attr, objName := p.NamePop(), p.NamePop(); p.AddAttrSet(objName, attr, true) }
            / 'this' sp '.' sp identifier sp { p.NamePush(text) } '=' sp exprRoot { p.AddStoreLocal(p.NamePop()) }
//            / 'global' '.' identifier sp { p.NamePush(text) } '=' sp exprRoot { p.AddStoreGlobal(p.NamePop()) }
// 注: attr_set 其实应该和 item_set 保持一致，只是暂时要求必须 identifier 开头
            / identifier sp { p.NamePush(text) } '.' sp identifier sp { p.NamePush(text) } '=' sp exprRoot { attr, objName := p.NamePop(), p.NamePop(); p.AddAttrSet(objName, attr, false) }
            / exprRoot '[' sp exprRoot ']' sp '=' sp exprRoot { p.AddOp(TypeItemSet) }
            / exprRoot _sliceSuffix '=' sp exprRoot { p.AddOp(TypeSliceSet) }

exprRoot <- exprSlice sp

_step <- (':' sp (exprRoot / sp { p.PushUndefined() }) / sp { p.PushUndefined() })
_sliceSuffix <- '[' sp (exprRoot / sp { p.PushUndefined() }) ':' sp (exprRoot / sp { p.PushUndefined() }) _step ']' sp
exprSlice <- exprTernary _sliceSuffix (!'=') { p.AddOp(TypeSliceGet) }
           / exprTernary

// 三元算符 ? :
exprValueIfExists <- exprLogicOr sp '?' sp { p.AddOp(TypeJne); p.OffsetPush() } exprLogicOr sp { p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush(); } // 这里的Pop对应的是jne，所有jmp将攒到最后
exprTernary <- exprLogicOr sp '?' sp { p.AddOp(TypeJne); p.OffsetPush() } exprLogicOr sp ':' sp { p.AddOp(TypeJmp); p.OffsetPopAndSet(); p.OffsetPush() } exprLogicOr sp { p.OffsetPopAndSet() }
        / exprValueIfExists { p.CounterPush() } ( ',' sp exprValueIfExists {p.CounterAdd(1)} )*  { p.PushStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.OffsetPopAndSet() } }
        / exprLogicOr

// switch { case 1: ..., case 2: ... }
// push cond1
// jne 2
// push "ret1"
// jmp 5
// push cond2
// jne 2
// push "ret2"
// jmp 1
// push 0 // 默认
// push "ret3"

// 注: 越靠下的算符优先级越高

// 逻辑运算
exprLogicOr <- exprLogicAnd sp (logicOr {p.AddOp(TypeJeDup); p.OffsetPush()} exprLogicAnd { p.AddOp(TypeJeDup); p.OffsetPush()} { p.AddOp(TypePushLast); p.OffsetPopAndSet(); p.OffsetPopAndSet();  } )*
exprLogicAnd <- exprBitwiseOr sp (logicAnd exprBitwiseOr { p.AddOp(TypeLogicAnd) } )*

// 位运算
exprBitwiseOr <- exprBitwiseAnd sp (bitwiseOr exprBitwiseAnd { p.AddOp(TypeBitwiseOr) })*
exprBitwiseAnd <- exprCompare sp (bitwiseAnd exprCompare { p.AddOp(TypeBitwiseAnd) })*


// 比较
exprCompare <- exprAdditive sp (
                 lt exprAdditive { p.AddOp(TypeCompLT) }
               / le exprAdditive { p.AddOp(TypeCompLE) }
               / eq exprAdditive { p.AddOp(TypeCompEQ) }
               / ne exprAdditive { p.AddOp(TypeCompNE) }
               / ge exprAdditive { p.AddOp(TypeCompGE) }
               / gt exprAdditive { p.AddOp(TypeCompGT) }
             )*

// 加减
exprAdditive <- exprMultiplicative sp (
                  add exprMultiplicative { p.AddOp(TypeAdd) }
                / minus exprMultiplicative { p.AddOp(TypeSubtract) }
              )*

// 乘除余
exprMultiplicative <- exprNullCoalescing sp (
                        multiply exprExp { p.AddOp(TypeMultiply) }
                      / divide exprExp { p.AddOp(TypeDivide) }
                      / modulus exprExp { p.AddOp(TypeModulus) }
                    )*

// 空值合并
exprNullCoalescing <- exprExp sp (
                        nullCoalescing exprExp { p.AddOp(TypeNullCoalescing) }
                    )

// 平方
exprExp <- exprUnaryNeg sp (
             exponentiation exprUnaryNeg { p.AddOp(TypeExponentiation) }
         )*


// 正数 负数
exprUnaryNeg <- minus exprRoot { p.AddOp(TypeNegation) }
              / exprUnaryPos

exprUnaryPos <- add exprRoot { p.AddOp(TypePositive) }
              / exprDice

// number or sub, 这样能省200行
nos <- (number / sub)

// 骰子算符
_diceMod <- (('kl' / [qQ]) nos { p.AddOp(TypeDiceSetKeepLowNum) } )  // 这里fvtt只有kl
          / (('kl' / [qQ]) { p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepLowNum) } )
          / (('kh' / [kK]) nos { p.AddOp(TypeDiceSetKeepHighNum) })  // 这里fvtt与国内骰一致
          / (('kh' / [kK]) { p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepHighNum) })
          / (('dh') nos { p.AddOp(TypeDiceSetDropHighNum) } ) // drop highest，需要在下一个之前，因为有2d20d1语法
          / (('dh') { p.PushIntNumber("1"); p.AddOp(TypeDiceSetDropHighNum) } )
          / (('dl') nos { p.AddOp(TypeDiceSetDropLowNum) } )  // drop lowest, 这里故意去掉了3d20d1 的支持，需要写成3d20dl1
          / (('dl') { p.PushIntNumber("1"); p.AddOp(TypeDiceSetDropLowNum) } )

_diceMod2 <- ('min' nos { p.AddOp(TypeDiceSetMin) })?
             ('max' nos { p.AddOp(TypeDiceSetMax) })?


_dicePearMod <- '优势' { p.PushIntNumber("2"); p.AddOp(TypeDiceSetTimes); p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepHighNum) }
              / '劣势' { p.PushIntNumber("2"); p.AddOp(TypeDiceSetTimes); p.PushIntNumber("1"); p.AddOp(TypeDiceSetKeepLowNum) }

detailStart <- { p.CounterPush(); p.CounterAdd(int64(token.begin)) }
detailEnd <- { p.AddDiceDetail(p.CounterPop(), int64(token.end)) }

// 3d20, 3d20d2, 2d20优势
_diceType1 <- nos [dD] nos
// d20
_diceType2 <- [dD] nos

// XdY 中的 dy 部分
_diceExpr1 <- [dD] { p.AddOp(TypeDiceInit); p.AddOp(TypeDiceSetTimes); } nos _diceMod? _diceMod2?
_diceExpr2 <- [dD] { p.AddOp(TypeDiceInit); } nos (_dicePearMod / _diceMod)? _diceMod2?

// 多重式子 d4d6d8
_diceExprX <- &_diceType2 detailStart _diceExpr1 detailEnd { p.AddOp(TypeDice) }

// WOD规则，左侧个数，a加骰线，m面数，k阈值
// 这里有点麻烦，此处 a5c 将被视为变量，而 2a5c 被视为 2a5余c
_wodTypeMain <- [aA] nos (([mM] nos) / ([kK] nos) / ([qQ] nos))*
_wodDiceType <- nos _wodTypeMain / _wodTypeMain !identifier_ch
_wodMain <- [aA] nos (([mM] nos { p.AddOp(TypeWodSetPoints) }) / ([kK] nos { p.AddOp(TypeWodSetThreshold) }) / ([qQ] nos { p.AddOp(TypeWodSetThresholdQ) }))*

// COC规则，b奖励骰，p惩罚骰
_cocDiceType <- [pPbB] (nos !identifier_ch / !identifier_ch)
_diceCocBonus <- [bB] (nos !identifier_ch / !identifier_ch {p.PushIntNumber("1")}) detailEnd { p.AddOp(TypeDiceCocBonus) }
_diceCocPenalty <- [pP] (nos !identifier_ch / !identifier_ch {p.PushIntNumber("1")}) detailEnd { p.AddOp(TypeDiceCocPenalty) }

// 双十字规则
_dcDiceType <- nos [cC] nos ([mM] nos)*

// Fate规则
_fateDiceType <- [fF] !identifier_ch

exprDice <- &_diceType1 detailStart nos _diceExpr1 detailEnd { p.AddOp(TypeDice) } _diceExprX*
          / &_diceType2 detailStart _diceExpr2 detailEnd { p.AddOp(TypeDice) } _diceExprX*
          / &{p.Flags.EnableDiceCoC} &_cocDiceType detailStart (_diceCocBonus / _diceCocPenalty)
          / &{p.Flags.EnableDiceWoD} &_wodDiceType detailStart { p.AddOp(TypeWodSetInit) } (nos { p.AddOp(TypeWodSetPool) } _wodMain / _wodMain !identifier_ch) detailEnd { p.AddOp(TypeDiceWod) }
          / &{p.Flags.EnableDiceDoubleCross} &_dcDiceType detailStart { p.AddOp(TypeDCSetInit) } nos { p.AddOp(TypeDCSetPool) } [cC] nos (([mM] nos { p.AddOp(TypeDCSetPoints) }) )* detailEnd { p.AddOp(TypeDiceDC) }
          / &{p.Flags.EnableDiceFate} &_fateDiceType detailStart [fF] !identifier_ch detailEnd { p.AddOp(TypeDiceFate) }
          / value

item_get <- ('[' sp exprRoot ']' sp (!'=') { p.AddOp(TypeItemGet) } func_invoke? )*

array_call <- 'kh' { p.WriteCode(TypeGetAttr, string("kh")) } (number { p.AddInvoke(1) } / {p.AddInvoke(0)})
            / 'kl' { p.WriteCode(TypeGetAttr, string("kl")) } (number { p.AddInvoke(1) } / {p.AddInvoke(0)})
            / ('[' sp exprRoot ']' sp { p.AddOp(TypeItemGet) })+

// TODO: value 中的 item_get attr_get 连写这种形式处理的很烂，之后改掉
attr_get <- ('.' sp identifier sp { p.WriteCode(TypeGetAttr, string(text)) } func_invoke? )*

func_invoke <- '(' sp ')' sp { p.AddInvoke(0) }
             / '(' sp { p.CounterPush(); p.CounterAdd(1) } exprRoot (',' sp exprRoot {p.CounterAdd(1)} )* ')' sp { p.AddInvoke(p.CounterPop()) }

dict_item <- { p.CounterAdd(1) } ((value_id_without_colon / exprRoot) sp ':' sp exprRoot) sp

// 右值
value_id_without_colon <- identifierWithoutColon sp { p.WriteCode(TypeLoadName, string(text)) } func_invoke? item_get attr_get

value <- 'true' sp { p.PushIntNumber("1") }
       / 'false' sp { p.PushIntNumber("0") }
       / 'undefined' sp { p.PushUndefined() }
       / 'this' sp { p.PushThis() } item_get attr_get
//       / 'global' sp { p.PushGlobal() } item_get attr_get
       / '&' identifier sp { p.WriteCode(TypeLoadNameRaw, string(text)) } attr_get

       / !{_matched := false} &{_matched} 'cafebabe'

       / float
       / number

       // 变量
       / &(identifier sp) detailStart identifier detailEnd spNoCR { p.WriteCode(TypeLoadNameWithDetail, string(text)) } func_invoke? item_get attr_get

       / fstring
       / sub item_get attr_get
       / '[' sp ']' sp { p.PushArray(0) } array_call? attr_get
       / '[' sp exprRoot '..' sp exprRoot ']' sp { p.AddOp(TypePushRange) } array_call? attr_get
       / '[' sp { p.CounterPush(); p.CounterAdd(1) } exprRoot (',' sp exprRoot {p.CounterAdd(1)} )* ']' sp { p.PushArray(p.CounterPop()) } array_call? attr_get
       / '{' sp '}' sp { p.PushDict(0) } item_get attr_get
       / '{' sp { p.CounterPush() } dict_item (',' sp dict_item )* ','? '}' sp { p.PushDict(p.CounterPop()) } item_get attr_get
       / 'func' sp func_def_params '{' sp { p.CodePush() } < stmtRoot? > '}' sp
          {  num := p.CounterPop(); arr := []string{}; for i:=int64(0); i<num; i++ { arr = append(arr, p.NamePop()) }; p.AddStoreFunction("", arr, string(text)) }


// 数字
number <- < [0-9]+ > { p.PushIntNumber(string(text)) }
float <- < [0-9]* '.' [0-9]+ > { p.PushFloatNumber(string(text)) }

// 字符串
strPart <- < (escape / (![{`\\].))+ > { p.PushStr(string(text)); p.CounterAdd(1) }
strPart1 <- < (escape / (![{\36\\].))+ > { p.PushStr(string(text)); p.CounterAdd(1) }
strPart2 <- < (escape / (![{"\\\n\r].))+ > { p.PushStr(string(text)); p.CounterAdd(1) }
strPart3 <- < (escape / (![{\'\\\n\r].))+ > { p.PushStr(string(text)); p.CounterAdd(1) }

fstring <- (
        ('\'' '\'' { p.PushStr("") })
      / ('\36' '\36' { p.PushStr("") })
      / ('"' '"' { p.PushStr("") })
      / ('`' '`' { p.PushStr("") })
      / ('`' { p.CounterPush() } < ( ('{' sp exprRoot {p.CounterAdd(1)} '}') / ('{%' sp exprRoot {p.CounterAdd(1)} '%}') / strPart )* > '`' { p.AddFormatString(string(text), p.CounterPop()) })
      / ('\36' { p.CounterPush() } < ( ('{' sp exprRoot {p.CounterAdd(1)} '}') / ('{%' sp exprRoot {p.CounterAdd(1)} '%}') / strPart1 )* > '\36' { p.AddFormatString(string(text), p.CounterPop()) }) // 特殊标记 0x1E
      / ('"' { p.CounterPush() } < ( strPart2 )* > '"' { p.CounterPop() })
      / ('\'' { p.CounterPush() } < ( strPart3 )* > '\'' { p.CounterPop() } )
    ) sp

// 变量名
keywords <- 'while' / 'if' / 'else' / 'continue' / 'break' / 'return' / 'func'
// 注: 不能连一起写因为peg编译会崩溃
identifier_ch0 <- [^!"#%&\'()*+,-./:;<=>?@\[\\\]^`{|}~ 0-9\t\n\r\36]
identifier_ch <- identifier_ch0 / [0-9:]

no_keywords <- !(keywords (sp1 / !(identifier_ch0 / [0-9]) .))
identifier <- no_keywords < identifier_ch0 identifier_ch* > // not (punctuation+number)
// 不含冒号的 identifier 用于字典，因为a:b是合法变量名，所以 {a:b} 会被误判
identifierWithoutColon <- no_keywords < identifier_ch0 (identifier_ch0 / [0-9])* > // not (punctuation+number)
// customDiceExpr <- no_keywords <(identifier_ch0 / [0-9])+>

// 旧版留档
// identifier <- !(keywords (sp1 / [!"#%&\'()*+,-./:;<=>?@\[\\\]^`{|}~\36])) < identifier_ch0 identifier_ch* > // not (punctuation+number)

// 括号
sub <- parenOpen exprRoot parenClose
parenOpen <- '(' sp
parenClose <- ')' sp

// 加减乘除余 乘方 空值合并
add <- ('+'/'＋') sp
minus <- ('-' / '－') sp
multiply <- ('*' / '＊') sp
divide <- ('/' / '／') sp
modulus <- '%' sp
exponentiation <- '^' sp / '**' sp
nullCoalescing <- '??' sp

// 按位算符
bitwiseOr <- '|' sp
bitwiseAnd <- '&' sp

// 逻辑算符
logicOr <- '||' sp
logicAnd <- '&&' sp

// 比较算符
// 注: 全角符号过于阴间，peg没办法处理＝＝，因此放弃兼容了，可以读入前做一个统一替换
lt <- '<' sp
gt <- '>' sp
le <- '<=' sp
ge <- '>=' sp
eq <- '==' sp
ne <- '!=' sp

// 其他
sp <- ( ' ' / '\t' / '\n' / '\r' )*
spNoCR <- ( ' ' / '\t' / '\r' )*
sp1 <- ( ' ' / '\t' / '\n' / '\r') sp / !.
escape <- '\\' ([btnfr"'\\])  //  / OctalEscape / UnicodeEscape
comment <- spNoCR '//' (!'\n' .)* ('\n' / !.)
